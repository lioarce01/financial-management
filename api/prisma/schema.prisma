// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  accounts     Account[]
  budgets      Budget[]
  goals        Goal[]
}

model Account {
  id           String        @id @default(uuid())
  userId       String
  accountName  String
  balance      Float
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id              String    @id @default(uuid())
  accountId       String
  categoryId      String?
  amount          Float
  description     String
  transactionType String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  account         Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Category {
  id           String        @id @default(uuid())
  name         String        @unique
  transactions Transaction[]
  budget       Budget[]
}

model Budget {
  id         String   @id @default(uuid())
  userId     String
  categoryId String
  amount     Float
  period     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Goal {
  id            String   @id @default(uuid())
  userId        String
  name          String
  targetAmount  Float
  currentAmount Float
  deadline      DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
